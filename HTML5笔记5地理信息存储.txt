HTML5笔记5地理信息存储
(服务器环境下运行)
地理位置
	经度  :   南北极的连接线
	纬度  :   东西连接的线

位置信息从何而来
	IP地址
	GPS全球定位系统
	Wi-Fi无线网络
	基站

地理位置对象
	navigator.geolocation
		单次定位请求  ：getCurrentPosition(请求成功，请求失败，数据收集方式)
		请求成功函数
			经度 :  coords.longitude
			纬度 :  coords.latitude
			准确度 :  coords.accuracy
			海拔 :  coords.altitude
			海拔准确度 :  coords.altitudeAcuracy
			行进方向 :  coords.heading
			地面速度 :  coords.speed
			时间戳 : new Date(position.timestamp)
		oInput.onclick = function(){
			navigator.geolocation.getCurrentPosition(function(position){//coords为坐标
				oT.value += '经度:' + position.coords.longitude+'\n';// \n为新行 \r换行相当于回车
				oT.value += '纬度 :' + position.coords.latitude+'\n';
				oT.value += '准确度 :' + position.coords.accuracy+'\n';
				oT.value += '海拔 :' + position.coords.altitude+'\n';
				oT.value += '海拔准确度 :' + position.coords.altitudeAcuracy+'\n';
				oT.value += '行进方向 :' + position.coords.heading+'\n';
				oT.value += '地面速度 :' + position.coords.speed+'\n';
				oT.value += '时间戳:' + new Date(position.timestamp)+'\n';
			},function(err){
				//err.code // 失败所对应的编号
				alert( err.code );
			},{
				enableHighAcuracy : true,
				timeout : 5000,
				maximumAge : 5000
			});
		};

地理位置对象_2  1
	navigator.geolocation
		请求失败函数
			失败编号  ：code
			0  :  不包括其他错误编号中的错误
			1  :  用户拒绝浏览器获取位置信息
			2  :  尝试获取用户信息，但失败了
			3  :   设置了timeout值，获取位置超时了
		数据收集 :  json的形式
			enableHighAcuracy  :  更精确的查找，默认false
			timeout  :  获取位置允许最长时间，默认infinity
			maximumAge :  位置可以缓存的最大时间，默认0
地理位置对象_3 2
	navigator.geolocation
		多次定位请求  :  watchPosition(像setInterval)
			移动设备有用，位置改变才会触发
			配置参数：frequency 更新的频率
	关闭更新请求  :  clearWatch(像clearInterval

百度地图API  3
<script src="http://api.map.baidu.com/api?v=1.3"></script>
创建基于地图的应用

Cookie
	数据存储到计算机中，通过浏览器控制添加与删除数据
Cookie的特点
	存储限制
		域名100个cookie,每组值大小4KB
	客户端、服务器端，都会请求服务器（头信息）
	页面间的cookie是共享

***Storage
	sessionStorage
		session临时回话，从页面打开到页面关闭的时间段
		窗口的临时存储，页面关闭，本地存储消失
	localStorage
		永久存储（可以手动删除数据）
Storage的特点
	存储量限制 ( 5M )
	客户端完成，不会请求服务器处理
	sessionStorage数据是不共享、 localStorage共享
****Storage API 4 5
	setItem():
		设置数据，key\value类型，类型都是字符串
		可以用获取属性的形式操作
	getItem():
		获取数据，通过key来获取到相应的value
	removeItem():
		删除数据，通过key来删除相应的value
	clear():
		删除全部存储的值
		例子 :  保存注册信息//重要 5.html //window.onunload 浏览器关闭时触发
	aInput[0].onclick = function(){//4.html
		//sessionStorage : 临时性存储
		//localStorage : 永久性存储
		//window.sessionStorage.setItem('name',aInput[3].value);
		window.localStorage.setItem('name',aInput[3].value);
	};
	aInput[1].onclick = function(){
		//alert(window.sessionStorage.getItem('name'));
		alert(window.localStorage.getItem('name'));
	};
	aInput[2].onclick = function(){
		window.localStorage.removeItem('name');
		//window.localStorage.clear();  //删除全部数据
	};


Storage API
	*******存储事件:v4  6.html
		当数据有修改或删除的情况下，就会触发*****storage事件//当前页面的事件不会触发
		***在对数据进行改变的窗口对象上是不会触发的
		Key : 修改或删除的key值，如果调用clear(),key为null
		newValue  :  新设置的值，如果调用removeStorage(),key为null
		oldValue :  调用改变前的value值
		storageArea : 当前的storage对象
		url :  触发该脚本变化的文档的url
		注：session同窗口才可以,例子：iframe操作
	例子 :   同步购物车(重要) 7.html
		window.addEventListener('storage',function(ev){  //当前页面的事件不会触发
			//alert(123);
			console.log( ev.key );
			console.log( ev.newValue );
			console.log( ev.oldValue );
			console.log( ev.storageArea );
			console.log( ev.url );
		},false);
综合实例
	行走日记
		地图
		本地存储




